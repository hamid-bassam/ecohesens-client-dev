// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Product {
  id     String @id 
  handle String

  variantId        String
  availableForSale Boolean @default(true)

  title       String?
  description String?

  featuredImage Json
  price         Float
  // Relations

  suggestions ProductSuggestion[]
  Selection   Selection?          @relation(fields: [selectionId], references: [id])
  selectionId String?
}

model Suggestion {
  id        String              @id @default(uuid())
  boxId     String
  createdAt DateTime            @default(now())
  // Relations
  box       Box                 @relation(fields: [boxId], references: [id])
  products  ProductSuggestion[]
}

model ProductSuggestion {
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
  suggestionId String
  isVariant    Boolean    @default(true)
  
  @@id([productId, suggestionId])
}

model Box {
  id          String       @id @default(uuid())
  userId      String
  title       String
  status      BoxStatus    @default(PENDING)
  createdAt   DateTime     @default(now())
  // Relations
  user        User         @relation(fields: [userId], references: [id])
  suggestions Suggestion[]
  selection   Selection[]
}

model User {
  id        String      @id @default(uuid())
  firstname String?
  lastname  String?
  email     String      @unique
  // Relations
  boxes     Box[]
  selection Selection[]
}

model Selection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  products Product[]
  // Relations
  box      Box       @relation(fields: [boxId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
  boxId    String
  userId   String
}

enum BoxStatus {
  PENDING
  SENT
}
